AWSTemplateFormatVersion: '2010-09-09'
Description: AWS Lambda Deployment Stack

Parameters:

  S3SourceBucket:
    Type: String
    Description: S3 bucket where Lambda functions source are stored

  LogBucketName:
    Type: String
    AllowedPattern: '[a-z][a-z0-9]*'
    Description: Name of Amazon S3 bucket for log [a-z][a-z0-9]*

  ElasticsearchDomainName:
    Type: String
    AllowedPattern: '[a-z][a-z0-9]*'
    Description: Name of Elasticsearch domain for log [a-z][a-z0-9]*

  ElasticsearchIndexName:
    Type: String
    AllowedPattern: '[a-z][a-z0-9]*'
    Description: Name of Elasticsearch index from Kinesis Firehose [a-z][a-z0-9]*
    
  FirehoseName:
    Type: String
    AllowedPattern: '[a-z][a-z0-9]*'
    Description: DeliveryStream for ES and S3 [a-z][a-z0-9]*

Resources:

  IngestLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Consumes records and forward to Firehose delivery stream
      FunctionName: !Sub ${AWS::StackName}-handler
      Runtime: python3.8
      Handler: ingest.lambda_handler
      Code:
        S3Bucket: !Ref S3SourceBucket
        S3Key: ingest.zip
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 3
      MemorySize: 128
      Environment:
        Variables:
          STREAM_NAME: !Sub ${FirehoseName}

  ComprehendLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Log transformation for Firehose delivery stream
      FunctionName: !Sub ${AWS::StackName}-comprehend-handler
      Runtime: python3.8
      Handler: comprehend.lambda_handler
      Code:
        S3Bucket: !Ref S3SourceBucket
        S3Key: comprehend.zip
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      MemorySize: 128
      Environment:
        Variables:
          STREAM_NAME: !Sub ${FirehoseName}

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-lambda-exec
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
                - 'firehose.amazonaws.com'
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: !Sub ${AWS::StackName}-lambda-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*
              -
                Effect: Allow
                Action:
                  - firehose:PutRecord
                  - firehose:PutRecordBatch
                Resource:
                  - arn:aws:firehose:*:*:*
              -
                Effect: Allow
                Action:
                  - comprehend:DetectEntities
                  - comprehend:DetectKeyPhrases
                  - comprehend:DetectDominantLanguage
                  - comprehend:DetectSentiment
                  - comprehend:DetectSyntax
                Resource:
                  - '*'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  CloudWatchFirehoseLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/kinesisfirehose/${AWS:StackName}
      RetentionInDays: 7

  CloudWatchFirehoseESLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref CloudWatchFirehoseLogGroup
      LogStreamName: es-delivery
  
  CloudWatchFirehoseS3LogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref CloudWatchFirehoseLogGroup
      LogStreamName: s3-delivery
  
  ESDeliveryStream: 
    Type: AWS::KinesisFirehose::DeliveryStream
    DependsOn:
      - DeliveryPolicy
    Properties:
      DeliveryStreamName: !Sub "${FirehoseName}"
      DeliveryStreamType: "DirectPut"
      ElasticsearchDestinationConfiguration:
        ProcessingConfiguration:
          Enabled: 'true'
          Processors:
            - Parameters:
              - ParameterName: LambdaArn
                ParameterValue: !GetAtt ComprehendLambda.Arn
              Type: Lambda 
        BufferingHints: 
          IntervalInSeconds: 60
          SizeInMBs: 50
        CloudWatchLoggingOptions: 
          Enabled: true
          LogGroupName: !Ref CloudWatchFirehoseLogGroup
          LogStreamName: !Ref CloudWatchFirehoseESLogStream
        DomainARN: !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ElasticsearchDomainName}"
        IndexName: !Ref "ElasticsearchIndexName"
        IndexRotationPeriod: "NoRotation"
        TypeName: "fromFirehose"
        RetryOptions: 
          DurationInSeconds: 60
        RoleARN: !GetAtt DeliveryRole.Arn
        S3BackupMode: "AllDocuments"
        S3Configuration: 
          BucketARN: !Sub "arn:aws:s3:::${LogBucketName}"
          BufferingHints: 
            IntervalInSeconds: 60
            SizeInMBs: 50
          CompressionFormat: "UNCOMPRESSED"
          Prefix: "log/"
          RoleARN: !GetAtt DeliveryRole.Arn 
          CloudWatchLoggingOptions: 
            Enabled: true
            LogGroupName: !Ref CloudWatchFirehoseLogGroup
            LogStreamName: !Ref CloudWatchFirehoseS3LogStream

  DeliveryRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              Service:
                - 'firehose.amazonaws.com'
            Condition:
              StringEquals:
                'sts:ExternalId' : !Ref 'AWS::AccountId'
      RoleName: "DeliveryRole"

  DeliveryPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: "DeliveryPolicy"
      Roles:
        - !Ref "DeliveryRole"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
              - 's3:PutObjectAcl'
            Resource:
              - !Sub 'arn:aws:s3:::${LogBucketName}'
              - !Sub 'arn:aws:s3:::${LogBucketName}/*'
          - Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
              - 'lambda:GetFunctionConfiguration'
            Resource: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:%FIREHOSE_DEFAULT_FUNCTION%:%FIREHOSE_DEFAULT_VERSION%'
          - Effect: Allow
            Action:
              - 'es:DescribeElasticsearchDomain'
              - 'es:DescribeElasticsearchDomains'
              - 'es:DescribeElasticsearchDomainConfig'
              - 'es:ESHttpPost'
              - 'es:ESHttpPut'
            Resource:
              - !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ElasticsearchDomainName}"
              - !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ElasticsearchDomainName}/*"
          - Effect: Allow
            Action:
              - 'es:ESHttpGet'
            Resource:
              - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ElasticsearchDomainName}/_all/_settings'
              - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ElasticsearchDomainName}/_cluster/stats'
              - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ElasticsearchDomainName}/${ElasticsearchIndexName}*/_mapping/superstore'
              - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ElasticsearchDomainName}/_nodes'
              - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ElasticsearchDomainName}/_nodes/stats'
              - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ElasticsearchDomainName}/_nodes/*/stats'
              - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ElasticsearchDomainName}/_stats'
              - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ElasticsearchDomainName}/${ElasticsearchIndexName}*/_stats'
          - Effect: Allow
            Action:
              - 'logs:PutLogEvents'
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/kinesisfirehose/:log-stream:*'
          - Effect: Allow
            Action:
              - 'kinesis:DescribeStream'
              - 'kinesis:GetShardIterator'
              - 'kinesis:GetRecords'
            Resource: !Sub 'arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/%FIREHOSE_STREAM_NAME%'
          - Effect: Allow
            Action:
              - 'kms:Decrypt'
              - 'kms:GenerateDataKey'
            Resource:
              - !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/%SSE_KEY_ARN%'
            Condition:
              StringEquals:
                'kms:ViaService': !Sub 's3.${AWS::Region}.amazonaws.com'
              StringLike:
                'kms:EncryptionContext:aws:s3:arn': !Sub 'arn:aws:::${LogBucketName}/*'
          - Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
              - 'lambda:GetFunctionConfiguration'
            Resource: !GetAtt ComprehendLambda.Arn
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: arn:aws:logs:*:*:*


